import requests
import json
import socket
from ipwhois import IPWhois
import time

class IPInvestigator:
    def __init__(self, ip_address):
        self.ip = ip_address
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        }
        self.timeout = 10
        self.delay = 2  

    def validate_ip(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ IP-–∞–¥—Ä–µ—Å–∞"""
        try:
            socket.inet_aton(self.ip)
            return True
        except socket.error:
            return False

    def get_ip_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP"""
        if not self.validate_ip():
            return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP-–∞–¥—Ä–µ—Å–∞"}

        print(f"\n[üîç] –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ IP: {self.ip}")
        results = {}

       
        print("[+] –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        try:
            time.sleep(self.delay)
            url = f"http://ip-api.com/json/{self.ip}?fields=status,message,continent,country,regionName,city,district,zip,lat,lon,timezone,isp,org,as,asname,reverse,mobile,proxy,hosting,query"
            response = requests.get(url, headers=self.headers, timeout=self.timeout)
            data = response.json()
            
            if data.get('status') == 'success':
                results['ip_api'] = {
                    '–°—Ç—Ä–∞–Ω–∞': data.get('country'),
                    '–†–µ–≥–∏–æ–Ω': data.get('regionName'),
                    '–ì–æ—Ä–æ–¥': data.get('city'),
                    '–ü—Ä–æ–≤–∞–π–¥–µ—Ä': data.get('isp'),
                    '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è': data.get('org'),
                    'AS –Ω–æ–º–µ—Ä': data.get('as'),
                    '–ü—Ä–æ–∫—Å–∏/VPN': data.get('proxy') or data.get('hosting'),
                    '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã': f"{data.get('lat')}, {data.get('lon')}",
                    '–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å': data.get('timezone')
                }
        except Exception as e:
            results['ip_api_error'] = str(e)

        
        print("[+] –ü–æ–ª—É—á–∞–µ–º WHOIS –¥–∞–Ω–Ω—ã–µ...")
        try:
            time.sleep(self.delay)
            obj = IPWhois(self.ip)
            whois_data = obj.lookup_rdap()
            
            results['whois'] = {
                '–°–µ—Ç—å': whois_data.get('network', {}).get('cidr'),
                '–û–ø–∏—Å–∞–Ω–∏–µ': whois_data.get('network', {}).get('name'),
                '–ö–æ–Ω—Ç–∞–∫—Ç—ã': whois_data.get('entities', [])[0] if whois_data.get('entities') else None,
                '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': whois_data.get('network', {}).get('events', [{}])[0].get('timestamp'),
                '–°—Ç–∞—Ç—É—Å': whois_data.get('network', {}).get('status')
            }
        except Exception as e:
            results['whois_error'] = str(e)

        
        print("[+] –ü—Ä–æ–≤–µ—Ä—è–µ–º VPN/Tor...")
        try:
            time.sleep(self.delay)
            url = f"https://ipinfo.io/{self.ip}/json?token=YOUR_IPINFO_TOKEN"  
            response = requests.get(url, headers=self.headers, timeout=self.timeout)
            data = response.json()
            
            results['vpn_tor_check'] = {
                '–¢–∏–ø': data.get('privacy', {}).get('vpn') or data.get('privacy', {}).get('tor'),
                '–°–µ—Ä–≤–∏—Å': data.get('company', {}).get('name'),
                '–ü—Ä–æ–∫—Å–∏': data.get('privacy', {}).get('proxy')
            }
        except Exception as e:
            results['vpn_error'] = str(e)

        
        print("[+] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...")
        try:
            time.sleep(self.delay)
            url = f"https://api.abuseipdb.com/api/v2/check?ipAddress={self.ip}"
            headers = {
                'Key': 'YOUR_ABUSEIPDB_KEY',  
                'Accept': 'application/json'
            }
            response = requests.get(url, headers=headers, timeout=self.timeout)
            data = response.json()
            
            if data.get('data'):
                results['abuse_info'] = {
                    '–†–µ–ø—É—Ç–∞—Ü–∏—è': data['data'].get('abuseConfidenceScore'),
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤': data['data'].get('totalReports'),
                    '–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç': data['data'].get('lastReportedAt'),
                    '–î–æ–º–µ–Ω—ã': data['data'].get('domain')
                }
        except Exception as e:
            results['abuse_error'] = str(e)

        
        print("[+] –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã...")
        try:
            common_ports = [21, 22, 23, 25, 53, 80, 110, 143, 443, 3306, 3389]
            open_ports = []
            
            for port in common_ports:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((self.ip, port))
                if result == 0:
                    open_ports.append(port)
                sock.close()
                time.sleep(0.5)
                
            results['open_ports'] = open_ports
        except Exception as e:
            results['ports_error'] = str(e)

        
        filename = f"ip_report_{self.ip.replace('.', '_')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"\n[‚úì] –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
        return results

if __name__ == "__main__":
    print("""
    ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë         ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù          ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù OWNER->@rootkitov
    """)
    
    ip = input("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ").strip()
    investigator = IPInvestigator(ip)
    report = investigator.get_ip_info()
    
    print("\n" + "="*50)
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ IP:")
    print(json.dumps(report, ensure_ascii=False, indent=2))